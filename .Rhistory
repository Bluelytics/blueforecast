library(forecast)
library(lubridate)
blue <- read.csv('/home/sicarul/dev/blueforecast/export_blue.csv')
agg <- setNames(aggregate(blue$value_sell, by=list(as.Date(blue$date)), FUN=mean), c('date', 'x'))
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(agg$date)), ymd(max(agg$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
numtest = round(sqrt(length(final$x)))
numbase = length(final$x)-numtest
base = final[0:numbase,]
test = final[(numbase+1):length(final$x),]
indexmes <- function(bd) {((year(bd) - 2011) * 12) + month(bd)}
basedate = min(ymd(base$date))
testdate = min(ymd(test$date))
bts <- ts(base$x, start=c(year(basedate), yday(basedate)), frequency=365)
tts <- ts(test$x, start=c(year(testdate), yday(testdate)), frequency=365)
plot(bts)
plot(tts)
picos = as.numeric(seq (bts) %in% c(1319:1406, 821:872, 1088:1194))
adf.test(bts, alternative = "stationary")
library(tseries)
adf.test(bts, alternative = "stationary")
ns <- nsdiffs(bts)
ns
fit_arima <- auto.arima(bts, d=0,  xreg=picos, trace=TRUE)
summary(fit_arima)
plot(fit_arima$x,col="red")
lines(fitted(fit_arima),col="blue")
fcast_arima <- forecast(fit_arima, h=30, xreg=rep(0,30))
plot(fit_arima$residuals)
ac_arima <- accuracy(fcast_arima, tts)
ac_arima
plot(fcast_arima)
lines(tts, col="purple", lwd=2)
fit <- Arima(bts, order=c(0,0,2), xreg=picos)
summary(fit)
plot(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
fit <- Arima(bts, order=c(1,0,2), xreg=picos)
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
fit <- Arima(bts, order=c(1,0,5), xreg=picos)
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
fit <- Arima(bts, order=c(2,0,5), xreg=picos)
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
fit <- Arima(bts, order=c(2,0,5), include.mean=FALSE, xreg=picos)
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
summary(fit)
fit <- Arima(bts, order=c(2,0,5), xreg=picos,include.mean=FALSE)
summary(fit)
fit <- Arima(bts, order=c(2,0,5), xreg=picos, include.mean = FALSE)
summary(fit)
fit <- Arima(bts, order=c(2,0,5), xreg=picos, include.mean = FALSE)
fit <- Arima(bts, order=c(2,0,5), xreg=picos, include.mean = FALSE, method="ML)
fit <- Arima(bts, order=c(2,0,5), xreg=picos, include.mean = FALSE, method="ML")
fit <- Arima(bts, order=c(2,0,5), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
fit <- Arima(bts, order=c(2,0,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
fit <- Arima(bts, order=c(2,0,1), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
fit <- Arima(bts, order=c(1,0,1), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
fit <- Arima(bts, order=c(3,1,3), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
fit <- Arima(bts, order=c(3,2,3), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
fit <- Arima(bts, order=c(3,2,4), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
summary(fit)
fit <- Arima(bts, order=c(3,2,3), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
fit <- Arima(bts, order=c(3,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
tsdiag(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
resid <-fit$residuals
norm <- rnorm(length(fit$residuals))
ks.test(resid, norm)
ks.test(resid, 'pnorm')
resid <-fit$residuals
ks.test(resid, 'pnorm')
ks.test(resid, 'pnorm', mean(resid), sd(resid))
resid <-residuals(fit)
ks.test(resid, 'pnorm', mean(resid), sd(resid))
resid
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
tsdiag(fit)
plot(fcast)
lines(tts, col="purple", lwd=2)
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
resid <-residuals(fit_arima)
ks.test(resid, 'pnorm', mean(resid), sd(resid))
fit_arima <- auto.arima(bts, d=2,  xreg=picos, trace=TRUE)
summary(fit_arima)
plot(fit_arima$x,col="red")
lines(fitted(fit_arima),col="blue")
fcast_arima <- forecast(fit_arima, h=30, xreg=rep(0,30))
plot(fit_arima$residuals)
ac_arima <- accuracy(fcast_arima, tts)
ac_arima
plot(fcast_arima)
lines(tts, col="purple", lwd=2)
resid <-residuals(fit_arima)
ks.test(resid, 'pnorm', mean(resid), sd(resid))
mean(resid)
sd(resid)
resid
plot(fit_arima$residuals)
plot(fit_arima$residuals)
ac_arima <- accuracy(fcast_arima, tts)
ac_arima
plot(fcast_arima)
lines(tts, col="purple", lwd=2)
fit_arima <- auto.arima(bts, d=2,  xreg=picos, trace=TRUE)
summary(fit_arima)
fit_arima <- auto.arima(bts, d=2, max.p=15, max.q=15,  xreg=picos, trace=TRUE)
summary(fit_arima)
fit_arima <- auto.arima(bts, d=2, max.p=15, max.q=15,  xreg=picos, ic="bic", trace=TRUE)
summary(fit_arima)
fit_arima <- auto.arima(bts, d=2, max.p=15, max.q=15, start.p=15, start.q=15,  xreg=picos, ic="bic", trace=TRUE)
summary(fit_arima)
rbind(c(1,2), c(2,3))
picos = rbind(
as.numeric(seq (bts) %in% c(1319:1406))
as.numeric(seq (bts) %in% c(1088:1194))
as.numeric(seq (bts) %in% c(821:872))
)
picos = rbind(
as.numeric(seq (bts) %in% c(1319:1406)),
as.numeric(seq (bts) %in% c(1088:1194)),
as.numeric(seq (bts) %in% c(821:872))
)
picos
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
summary(fit)
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
xreg <- model.matrix(~as.factor(month))[,2:12]
~as.factor(month)
xreg <- model.matrix(as.numeric(seq (bts) %in% c(1319:1406)))
as.numeric(seq (bts) %in% c(1319:1406))
xreg <- model.matrix(~as.numeric(seq (bts) %in% c(1319:1406)))
xreg
head(xreg)
xreg <- model.matrix(~as.numeric(seq (bts) %in% c(1319:1406)))[,2]
head(xreg)
xreg
xreg <- model.matrix(~as.numeric(seq (bts) %in% c(1319:1406)), as.numeric(seq (bts) %in% c(1088:1194)))[,2]
xreg <- model.matrix(~as.numeric(seq (bts) %in% c(1319:1406)), ~as.numeric(seq (bts) %in% c(1088:1194)))[,2]
picos = data.frame(
as.numeric(seq (bts) %in% c(1319:1406)),
as.numeric(seq (bts) %in% c(1088:1194)),
as.numeric(seq (bts) %in% c(821:872))
)
picos
head(picos)
picos = data.frame(
p1=as.numeric(seq (bts) %in% c(1319:1406)),
p2=as.numeric(seq (bts) %in% c(1088:1194)),
p3=as.numeric(seq (bts) %in% c(821:872))
)
head(picos)
picos = as.matrix(picos_data)
picos_data = data.frame(
p1=as.numeric(seq (bts) %in% c(1319:1406)),
p2=as.numeric(seq (bts) %in% c(1088:1194)),
p3=as.numeric(seq (bts) %in% c(821:872))
)
picos = as.matrix(picos_data)
picos
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
tsdiag(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=rep(0,30), h=30)
fcast <- forecast(fit, xreg=c(rep(0,30),rep(0,30),rep(0,30)), h=30)
fcast <- forecast(fit, xreg=r(rep(0,30),rep(0,30),rep(0,30)), h=30)
fcast <- forecast(fit, xreg=rbind(rep(0,30),rep(0,30),rep(0,30)), h=30)
rbind(rep(0,30),rep(0,30),rep(0,30))
cbind(rep(0,30),rep(0,30),rep(0,30))
fcast <- forecast(fit, xreg=cbind(rep(0,30),rep(0,30),rep(0,30)), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
summary(fit)
resid <-residuals(fit)
ks.test(resid, 'pnorm', mean(resid), sd(resid))
fit_ets <- ets(bts h=30)
fit_ets <- ets(bts, h=30)
library(forecast)
library(tseries)
library(lubridate)
blue <- read.csv('/home/sicarul/dev/blueforecast/export_blue.csv')
agg <- setNames(aggregate(blue$value_sell, by=list(as.Date(blue$date)), FUN=mean), c('date', 'x'))
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(agg$date)), ymd(max(agg$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
numtest = round(sqrt(length(final$x)))
numbase = length(final$x)-numtest
base = final[0:numbase,]
test = final[(numbase+1):length(final$x),]
indexmes <- function(bd) {((year(bd) - 2011) * 12) + month(bd)}
basedate = min(ymd(base$date))
testdate = min(ymd(test$date))
bts <- ts(base$x, start=c(year(basedate), yday(basedate)), frequency=365)
tts <- ts(test$x, start=c(year(testdate), yday(testdate)), frequency=365)
plot(bts)
plot(tts)
picos_data = data.frame(
p1=as.numeric(seq (bts) %in% c(1319:1406)),
p2=as.numeric(seq (bts) %in% c(1088:1194)),
p3=as.numeric(seq (bts) %in% c(821:872))
)
picos = as.matrix(picos_data)
seasonal <- stl(bts, s.window=4)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
plot(bts)
lines(ma(bts,3),col="red")
dec <- decompose(bts, type="multiplicative")
plot(dec)
tsdisplay(bts)
tsdisplay(diff(bts,30))
tsdisplay(diff(diff(bts,30)))
tsdisplay(diff(diff(diff(bts,30))))
plot(diff(log(bts),7))
adf.test(bts, alternative = "stationary")
ns <- nsdiffs(bts)
fit_ets <- ets(bts)
fcast_ets <- forecast(fit_ets, n.head=30)
summary(fit_ets)
plot(fcast_ets)
ac_ets <- accuracy(fcast_ets, tts)
ac_ets
lines(tts, col="purple", lwd=2)
fit_ets <- ets(bts)
fcast_ets <- forecast(fit_ets, n.head=30)
bts <- ts(base$x, start=c(year(basedate), yday(basedate)), frequency=7)
tts <- ts(test$x, start=c(year(testdate), yday(testdate)), frequency=7)
plot(bts)
plot(tts)
picos_data = data.frame(
p1=as.numeric(seq (bts) %in% c(1319:1406)),
p2=as.numeric(seq (bts) %in% c(1088:1194)),
p3=as.numeric(seq (bts) %in% c(821:872))
)
picos = as.matrix(picos_data)
seasonal <- stl(bts, s.window=4)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
dec <- decompose(bts, type="multiplicative")
plot(dec)
tsdisplay(bts)
tsdisplay(diff(bts,30))
tsdisplay(diff(diff(bts,30)))
tsdisplay(diff(diff(diff(bts,30))))
plot(diff(log(bts),7))
adf.test(bts, alternative = "stationary")
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
tsdiag(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=cbind(rep(0,30),rep(0,30),rep(0,30)), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
seasonal <- stl(bts, s.window=4)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
seasonal <- stl(bts, s.window=4)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
library(forecast)
library(tseries)
library(lubridate)
blue <- read.csv('/home/sicarul/dev/blueforecast/export_blue.csv')
agg <- setNames(aggregate(blue$value_sell, by=list(as.Date(blue$date)), FUN=mean), c('date', 'x'))
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(agg$date)), ymd(max(agg$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
numtest = round(sqrt(length(final$x)))
numbase = length(final$x)-numtest
base = final[0:numbase,]
test = final[(numbase+1):length(final$x),]
indexmes <- function(bd) {((year(bd) - 2011) * 12) + month(bd)}
basedate = min(ymd(base$date))
testdate = min(ymd(test$date))
bts <- ts(base$x, start=c(year(basedate), yday(basedate)), frequency=365)
tts <- ts(test$x, start=c(year(testdate), yday(testdate)), frequency=365)
plot(bts)
plot(tts)
picos_data = data.frame(
p1=as.numeric(seq (bts) %in% c(1319:1406)),
p2=as.numeric(seq (bts) %in% c(1088:1194)),
p3=as.numeric(seq (bts) %in% c(821:872))
)
picos = as.matrix(picos_data)
seasonal <- stl(bts, s.window=4)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
plot(bts)
lines(ma(bts,3),col="red")
dec <- decompose(bts, type="multiplicative")
plot(dec)
tsdisplay(bts)
tsdisplay(diff(bts,30))
tsdisplay(diff(diff(bts,30)))
tsdisplay(diff(diff(diff(bts,30))))
plot(diff(log(bts),7))
adf.test(bts, alternative = "stationary")
ns <- nsdiffs(bts)
seasonal <- stl(bts, s.window=1)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
seasonal <- stl(bts, s.window=4, h=30)
seasonal <- stl(bts, s.window=4, n.ahead=30)
seasonal <- stl(bts, s.window=4, h.ahead=30)
seasonal <- stl(bts, s.window=4)
plot(seasonal)
monthplot(seasonal$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(bts, col="grey")
lines(seasadj(seasonal),col="red",ylab="Seasonally adjusted")
eeadj <- seasadj(seasonal)
fcast_season <- forecast(seasonal, method="naive")
plot(fcast_season)
lines(tts, col="purple", lwd=2)
plot(bts)
lines(ma(bts,3),col="red")
dec <- decompose(bts, type="multiplicative")
plot(dec)
tsdisplay(bts)
tsdisplay(diff(bts,30))
tsdisplay(diff(diff(bts,30)))
tsdisplay(diff(diff(diff(bts,30))))
plot(diff(log(bts),7))
fit <- Arima(bts, order=c(2,2,2), xreg=picos, include.mean = FALSE, method="ML")
summary(fit)
tsdiag(fit)
plot(residuals(fit))
Box.test(residuals(fit), lag=60, fitdf=4, type="Ljung")
fcast <- forecast(fit, xreg=cbind(rep(0,30),rep(0,30),rep(0,30)), h=30)
plot(fcast)
lines(tts, col="purple", lwd=2)
fit_ar <- ar(bts, method = "mle", n.ahead=365)
fcast_ar <- forecast(fit_ar, h=365)
plot(fcast_ar)
ac_ar <- accuracy(fcast_ar, tts)
ac_ar
fit_arima <- auto.arima(bts, d=2, max.p=15, max.q=15,  xreg=picos, ic="bic", trace=TRUE)
summary(fit_arima)
plot(fit_arima$x,col="red")
lines(fitted(fit_arima),col="blue")
fcast_arima <- forecast(fit_arima, h=30, xreg=rep(0,30))
plot(fit_arima$residuals)
ac_arima <- accuracy(fcast_arima, tts)
ac_arima
plot(fcast_arima)
lines(tts, col="purple", lwd=2)
fit_ets <- ets(bts)
fcast_ets <- forecast(fit_ets, n.head=30)
summary(fit_ets)
plot(fcast_ets)
ac_ets <- accuracy(fcast_ets, tts)
ac_ets
lines(tts, col="purple", lwd=2)
fit_ets <- stlf(bts, method="ets", h=30)
fcast_ets <- forecast(fit_ets, n.head=30)
summary(fit_ets)
plot(fcast_ets)
ac_ets <- accuracy(fcast_ets, tts)
ac_ets
lines(tts, col="purple", lwd=2)
summary(fit_ets)
fitted(fit_ets)
plot(fitted(fit_ets))
plot(fit_ets$x,col="red")
lines(fitted(fit_ets),col="blue")
plot(fcast_ets)
lines(fitted(fit_ets),col="blue")
plot(fcast_ets$x,col="red")
lines(fitted(fit_ets),col="blue")
plot(fcast_ets)
lines(fitted(fit_ets),col="blue")
plot(fcast_ets)
lines(fitted(fit_ets),col="green")
ac_ets <- accuracy(fcast_ets, tts)
ac_ets
lines(tts, col="purple", lwd=2)
if (file.exists('local_config.R')){
source('local_config.R')
}
library(forecast)
library(RPostgreSQL)
library(RJSONIO)
add.months= function(date,n) seq(date, by = paste (n, "months"), length = 2)[2]
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="bluelytics")
dbSendQuery(con,"SET datestyle TO iso")
rs <- dbSendQuery(con, "select avg(value_sell) as value, date_trunc('month', date) as date from dolar_blue_dolarblue where source_id <> 'oficial' group by date_trunc('month', date) order by date;")
base_data <- fetch(rs,n=-1)
if (file.exists('local_config.R')){
source('local_config.R')
}
library(forecast)
library(RPostgreSQL)
library(RJSONIO)
add.months= function(date,n) seq(date, by = paste (n, "months"), length = 2)[2]
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="bluelytics")
dbSendQuery(con,"SET datestyle TO iso")
rs <- dbSendQuery(con, "select avg(value_sell) as value, date_trunc('day', date) as date from dolar_blue_dolarblue where source_id <> 'oficial' group by date_trunc('day', date) order by date;")
base_data <- fetch(rs,n=-1)
dbDisconnect(con)
dbUnloadDriver(drv)
dbDisconnect(con)
dbUnloadDriver(drv)
start_date <- base_data$date[1]
start_date
agg <- setNames(aggregate(base_data$value_sell, by=list(as.Date(base_data$date)), FUN=mean), c('date', 'x'))
